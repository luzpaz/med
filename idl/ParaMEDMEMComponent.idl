// Copyright (C) 2007-2011  CEA/DEN, EDF R&D, OPEN CASCADE
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//

// File: ParaMEDMEMComponent.idl
// Project: SALOME

/*!
  This file contains the IDL definitions of the ParaMEDMEM component in %SALOME application.
*/

#ifndef _SALOME_PARAMEDMEMCOMPO_IDL_
#define _SALOME_PARAMEDMEMCOMPO_IDL_

#include "SALOME_Component.idl"
#include "ParaMEDCouplingCorbaServant.idl"

module SALOME_MED
{
  interface MPIMEDCouplingFieldDoubleCorbaInterface:ParaMEDCouplingFieldDoubleCorbaInterface
  {
    void getDataByMPI(in string coupling) raises (SALOME::SALOME_Exception);
  };

  interface ParaMEDMEMComponent:Engines::EngineComponent,Engines::MPIObject
  {
    void setInterpolationOptions(in string coupling,
                                 in long print_level,
                                 in string intersection_type,
                                 in double precision,
                                 in double median_plane,
                                 in boolean do_rotate,
                                 in double bounding_box_adjustment,                                              in double bounding_box_adjustment_abs,
                                 in double max_distance_for_3Dsurf_intersect,
                                 in long orientation,
                                 in boolean measure_abs,
                                 in string splitting_policy,
                                 in boolean P1P0_bary_method) raises (SALOME::SALOME_Exception);
    void initializeCoupling(in string coupling) raises (SALOME::SALOME_Exception);
    void terminateCoupling(in string coupling) raises (SALOME::SALOME_Exception);
  };
} ;

#endif
