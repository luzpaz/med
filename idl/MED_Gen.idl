// Copyright (C) 2007-2011  CEA/DEN, EDF R&D, OPEN CASCADE
//
// Copyright (C) 2003-2007  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
// CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
//
// See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
//

//=============================================================================
// File      : Med_Gen.idl
// Project   : SALOME
//=============================================================================

#ifndef _Med_GEN_IDL_
#define _Med_GEN_IDL_


#include "SALOME_Exception.idl"
#include "SALOME_Component.idl"
#include "SALOMEDS.idl"
#include "MED.idl"

module SALOME_MED
{
  interface MED_Gen_Driver : SALOMEDS::Driver
  {
  };

  interface MED_Gen : Engines::EngineComponent, MED_Gen_Driver
  {
    /*!
      it returns a Corba pointer %MESH on the mesh stored in the .med file
      <VAR>fileName</VAR> with the name <VAR>meshName</VAR>.
     */
    SALOME_MED::GMESH readMeshInFile(in string fileName, in string studyName,
				     in string meshName)
      raises(SALOME::SALOME_Exception);

    /*!
      it returns a Corba pointer %FIELD on the field instance with the order
      <VAR>ordre</VAR> at the iteration <VAR>iter</VAR>, stored in the .med
      file <VAR>fileName</VAR> with the name <VAR>fieldName</VAR>.
     */
    SALOME_MED::FIELD readFieldInFile(in string fileName, in string studyName,
				      in string fieldName, in long iter,
				      in long ordre)
      raises (SALOME::SALOME_Exception);

    /*!
      it returns a Corba pointer on the %MED object regrouping all objects
      (%MESH and %FIELD) stored in the file <VAR>fileName</VAR>. All instances
      of the fields are stored without their type.
    */
    SALOME_MED::MED readStructFile(in string fileName,
				   in string studyName)
      raises (SALOME::SALOME_Exception);

    /*!
      It pushes all Corba pointers (%MED, %MESH, %FIELD) in the study named
      <VAR>studyName</VAR>. The %MED object regroups all objects
      (%MESH and %FIELD) stored in the file <VAR>fileName</VAR> and all
      instances of the fields are stored with their own type.
    */
    void readStructFileWithFieldType(in string fileName,
				     in string studyName)
      raises (SALOME::SALOME_Exception);
  };
};

#endif
